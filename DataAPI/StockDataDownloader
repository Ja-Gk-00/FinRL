import os
import pandas as pd
from finrl.marketdata.yahoodownloader import YahooDownloader

class StockDataDownloader:
    def __init__(self, ticker='AAPL', start_date='2020-01-01', end_date='2023-10-01', save_path='./data/djia'):
        self._ticker = ticker
        self._start_date = start_date
        self._end_date = end_date
        self._save_path = save_path

    # Getters
    def get_ticker(self):
        return self._ticker
    
    def get_start_date(self):
        return self._start_date
    
    def get_end_date(self):
        return self._end_date
    
    def get_save_path(self):
        return self._save_path

    # Setters
    def set_ticker(self, ticker):
        self._ticker = ticker
    
    def set_start_date(self, start_date):
        self._start_date = start_date
    
    def set_end_date(self, end_date):
        self._end_date = end_date
    
    def set_save_path(self, save_path):
        self._save_path = save_path

    # Download Methods
    def download_data(self):
        print(f'Downloading data for {self._ticker} starting {self._start_date} to {self._end_date}...')
        data = YahooDownloader(start_date=self._start_date, end_date=self._end_date, ticker_list=[self._ticker]).fetch_data()

        if not os.path.exists(self._save_path):
            os.makedirs(self._save_path)
        
        file_path = os.path.join(self._save_path, f'{self._ticker}.csv')
        data.to_csv(file_path)
        
        print(f'Dane zapisane w {file_path}')
        return file_path

    def remove_missing_values(self, data):
        data_cleaned = data.dropna()
        print(f"Removed Null values. Number of rows after cleanup: {len(data_cleaned)}")
        return data_cleaned

    def normalize_prices(self, data):
        price_columns = ['open', 'high', 'low', 'close', 'adjclose']
        for col in price_columns:
            if col in data.columns:
                min_val = data[col].min()
                max_val = data[col].max()
                data[col] = (data[col] - min_val) / (max_val - min_val)
        print(f"Price columns have been normalized: {price_columns}")
        return data

    def add_technical_indicators(self, data):

        # SMA indicator
        data['SMA'] = data['close'].rolling(window=20).mean()
        
        # EMA indicator
        data['EMA'] = data['close'].ewm(span=20, adjust=False).mean()
        
        print(f"Added technical indicators: SMA, EMA")
        return data
